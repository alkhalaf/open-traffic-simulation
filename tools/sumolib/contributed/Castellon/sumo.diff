Index: src/microsim/MSCORN.cpp
===================================================================
--- src/microsim/MSCORN.cpp	(Revision 5664)
+++ src/microsim/MSCORN.cpp	(Arbeitskopie)
@@ -100,6 +100,9 @@
         setWished(CORN_VEH_DEPART_INFO);
         setWished(CORN_VEH_ARRIVAL_INFO);
         break;
+    case CORN_OUT_PASSENGERS:
+      setWished(CORN_PAS_WAITINGTIME);
+      break;
     case CORN_OUT_EMISSIONS:
         setWished(CORN_MEAN_VEH_TRAVELTIME);
         setWished(CORN_MEAN_VEH_WAITINGTIME);
@@ -203,6 +206,28 @@
     <<"veh2=\"" << veh2<<"\"" <<" x2=\""<< x2 << "\""<< " y2=\"" << y2 << "\" />\n";
 }
 
+void
+MSCORN::savePassengerInfo(SUMOTime time, string callID, int waitingSeconds, std::string busID)
+{
+  if (!wished(CORN_OUT_PASSENGERS)) {
+    return;
+  }
+  
+  OutputDevice::getDeviceByOption("passengersinfo-output")
+    << "      <info demand_bus_stop=\"" << callID << "\" waitingSeconds=\"" << waitingSeconds << "\"  time=\"" <<time<< "\"  busID=\"" <<busID<<"\"/>\n";
+  
+}
 
+void
+MSCORN::saveBusOccupancyInfo(SUMOTime time, string callID, int Occupancy, string busID)
+{
+  if (!wished(CORN_OUT_BUS_OCCUPANCY)) {
+    return;
+  }
+
+  OutputDevice::getDeviceByOption("busoccupancy-output")
+    << "      <info demand_bus_stop=\"" << callID << "\" busID=\"" << busID << "\"  time=\"" << time << "\" occupancy=\"" <<Occupancy<<"\"/>\n";
+
+}
 /****************************************************************************/
 
Index: src/microsim/MSVehicle.h
===================================================================
--- src/microsim/MSVehicle.h	(Revision 5664)
+++ src/microsim/MSVehicle.h	(Arbeitskopie)
@@ -143,6 +143,10 @@
             return mySpeed;
         };
 
+        void addPassengers (int nPassengers){
+          myOccupancy+=nPassengers;
+        };
+
     private:
         /// the stored position
         SUMOReal myPos;
@@ -150,6 +154,9 @@
         /// the stored speed
         SUMOReal mySpeed;
 
+        /// the stored speed
+        int myOccupancy;
+
     };
 
     /// Destructor.
@@ -327,6 +334,20 @@
     SUMOReal getSpeed() const {
         return myState.mySpeed;
     }
+
+    /// Returns current occupancy
+    int getOccupancy() const {
+      return myState.myOccupancy;
+    }
+
+    void addPassengers(int nPassengers) {
+      myState.myOccupancy+=nPassengers;
+    }
+
+    void removePassengers(int nPassengers) {
+      myState.myOccupancy-=nPassengers;
+      if (myState.myOccupancy<0) myState.myOccupancy=0;
+    }
     //@}
 
 
Index: src/microsim/MSNet.h
===================================================================
--- src/microsim/MSNet.h	(Revision 5664)
+++ src/microsim/MSNet.h	(Arbeitskopie)
@@ -90,6 +90,7 @@
  */
 class MSNet
 {
+  friend class MSDemandBusStop;
 public:
     /** Get a pointer to the unique instance of MSNet (singleton).
      * @return Pointer to the unique MSNet-instance.
Index: src/microsim/MSVehicle.cpp
===================================================================
--- src/microsim/MSVehicle.cpp	(Revision 5664)
+++ src/microsim/MSVehicle.cpp	(Arbeitskopie)
@@ -64,6 +64,7 @@
 #endif
 
 #include "devices/MSDevice_CPhone.h"
+#include "trigger/MSDemandBusStop.h"
 
 #ifdef CHECK_MEMORY_LEAKS
 #include <foreign/nvwa/debug_new.h>
@@ -95,6 +96,7 @@
 {
     myPos = state.myPos;
     mySpeed = state.mySpeed;
+    myOccupancy = state.myOccupancy;
 }
 
 
@@ -103,6 +105,7 @@
 {
     myPos   = state.myPos;
     mySpeed = state.mySpeed;
+    myOccupancy = state.myOccupancy;
     return *this;
 }
 
@@ -111,7 +114,8 @@
 MSVehicle::State::operator!=(const State& state)
 {
     return (myPos   != state.myPos ||
-            mySpeed != state.mySpeed);
+            mySpeed != state.mySpeed ||
+            myOccupancy != state.myOccupancy);
 }
 
 
@@ -124,7 +128,7 @@
 
 MSVehicle::State::State(SUMOReal pos, SUMOReal speed) :
         myPos(pos), mySpeed(speed)
-{}
+{myOccupancy=0;}
 
 
 /* -------------------------------------------------------------------------
@@ -326,7 +330,10 @@
             // ... and have waited as long as needed
             if (myStops.begin()->busstop!=0) {
                 // inform bus stop about leaving it
-                myStops.begin()->busstop->leaveFrom(this);
+                if (dynamic_cast<MSDemandBusStop*>(myStops.begin()->busstop))
+                    (dynamic_cast<MSDemandBusStop*>(myStops.begin()->busstop))->leaveFrom(this);
+                else
+                    myStops.begin()->busstop->leaveFrom(this);
             }
             // the current stop is no longer valid
             myStops.pop_front();
@@ -367,6 +374,8 @@
                 if (bstop.busstop!=0) {
                     // let the bus stop know the vehicle
                     bstop.busstop->enter(this, myState.pos(), myState.pos()-myType->getLength());
+                    if (dynamic_cast<MSDemandBusStop*>(bstop.busstop))
+                        bstop.duration=dynamic_cast<MSDemandBusStop*>(bstop.busstop)->getStopDuration(this);
                 }
             }
             // decelerate
Index: src/microsim/trigger/MSBusStop.cpp
===================================================================
--- src/microsim/trigger/MSBusStop.cpp	(Revision 5664)
+++ src/microsim/trigger/MSBusStop.cpp	(Arbeitskopie)
@@ -91,12 +91,13 @@
 }
 
 
-void
+int
 MSBusStop::leaveFrom(void *what) throw()
 {
     assert(myEndPositions.find(what)!=myEndPositions.end());
     myEndPositions.erase(myEndPositions.find(what));
     computeLastFreePos();
+    return 0;
 }
 
 
Index: src/microsim/trigger/MSBusStop.h
===================================================================
--- src/microsim/trigger/MSBusStop.h	(Revision 5664)
+++ src/microsim/trigger/MSBusStop.h	(Arbeitskopie)
@@ -122,7 +122,7 @@
      * @param[in] what The vehicle that leaves the bus stop
      * @see computeLastFreePos
      */
-    void leaveFrom(void *what) throw();
+    int leaveFrom(void *what) throw();
 
 
     /** @brief Returns the last free position on this stop
Index: src/microsim/trigger/MSDemandBusStop.cpp
===================================================================
--- src/microsim/trigger/MSDemandBusStop.cpp	(Revision 0)
+++ src/microsim/trigger/MSDemandBusStop.cpp	(Revision 0)
@@ -0,0 +1,238 @@
+/****************************************************************************/
+/// @file    MSDemandBusStop.cpp
+/// @author  Alberto Zambrano Galbis
+/// @date    Marz 2008
+/// @version $Id: sumo.diff 5665 2008-06-27 05:14:06Z behrisch $
+///
+/// <A BRIEF DESCRIPTION OF THE FILE'S CONTENTS>
+/****************************************************************************/
+// SUMO, Simulation of Urban MObility; see http://sumo.sourceforge.net/
+// copyright : (C) 2001-2007
+//  by DLR (http://www.dlr.de/) and ZAIK (http://www.zaik.uni-koeln.de/AFS)
+/****************************************************************************/
+//
+//   This program is free software; you can redistribute it and/or modify
+//   it under the terms of the GNU General Public License as published by
+//   the Free Software Foundation; either version 2 of the License, or
+//   (at your option) any later version.
+//
+/****************************************************************************/
+
+
+// ===========================================================================
+// included modules
+// ===========================================================================
+#ifdef _MSC_VER
+#include <windows_config.h>
+#else
+#include <config.h>
+#endif
+
+#include <cassert>
+#include "MSTrigger.h"
+#include "MSTriggerControl.h"
+#include "microsim/MSVehicle.h"
+#include "MSDemandBusStop.h"
+#include <microsim/MSRoute.h>
+#include <microsim/MSEmitControl.h>
+
+
+#ifdef CHECK_MEMORY_LEAKS
+#include <utils/dev/debug_new.h>
+#endif
+
+
+// ===========================================================================
+// used namespaces
+// ===========================================================================
+using namespace std;
+
+
+// ===========================================================================
+// method definitions
+// ===========================================================================
+
+
+MSDemandBusStop::DemandCommand::DemandCommand() throw()
+                                                  : myAmValid(true)
+{}
+
+MSDemandBusStop::ReleaseDemandCommand::ReleaseDemandCommand() throw()
+: myAmValid(true)
+{}
+
+
+MSDemandBusStop::DemandCommand::~DemandCommand() throw()
+{}
+
+MSDemandBusStop::ReleaseDemandCommand::~ReleaseDemandCommand() throw()
+{}
+
+
+void
+MSDemandBusStop::buildSupportBus(std::string stop)
+{
+  MSVehicle *vehicle = 0;
+  std::stringstream ss;
+  std::string vehicleName;
+  ss << MSNet::getInstance()->getCurrentTimeStep();
+  vehicleName= "sup_veh_" + stop + "_" + ss.str();
+
+  vehicle =
+    MSNet::getInstance()->getVehicleControl().buildVehicle(vehicleName,
+    MSRoute::dictionary("sup_veh_route"), MSNet::getInstance()->getCurrentTimeStep()+60, MSNet::getInstance()->getVehicleControl().getVType("sup_veh"), 0, 0);
+  MSNet::getInstance()->myEmitter->add(vehicle);
+  MSNet::getInstance()->myVehicleControl->addVehicle(vehicleName,vehicle);
+
+  //TODO: The route of the support bus is hardcoded...
+  addStop("Universitat",vehicle);
+  addStop("Sos_Bayat_S",vehicle);
+  addStop("Riu_Sec_S",vehicle);
+  addStop("Paseo_de_Morella_Intermodal_S",vehicle);
+  addStop("Parc_Ribalta_S",vehicle);
+  addStop("Farola",vehicle);
+  addStop("Hospital",vehicle);
+  addStop("Parc_Ribalta_N",vehicle);
+  addStop("Paseo_de_Morella_Intermodal_N",vehicle);
+  addStop("Riu_Sec_N",vehicle);
+  addStop("Sos_Bayat_N",vehicle);
+}
+
+void
+MSDemandBusStop::addStop(std::string stopName, MSVehicle* vehicle)
+{
+  MSDemandBusStop *bs =
+    (MSDemandBusStop*) MSNet::getInstance()->getTriggerControl().getTrigger(stopName);
+  const MSLane &l = bs->getLane();
+
+  MSVehicle::Stop stop;
+  stop.lane = &((MSLane &) l);
+  stop.busstop = bs;
+  stop.pos = bs->getEndLanePosition();
+
+  //Default parameters. Duration will depend on amount of waiting passengers
+  stop.until=-1;
+  stop.duration=20;
+  stop.reached = false;
+  vehicle->addStop(stop);
+}
+
+
+
+SUMOTime
+MSDemandBusStop::DemandCommand::execute(SUMOTime) throw(ProcessError)
+{
+  // check whether this command has been descheduled
+  if (!myAmValid) {
+    return 0;
+  }
+  // Increase number of waiting passengers
+  if(rand()%60<myPassengersPerMinute) owner->myWaitingPassengers.push_front(new Passenger(MSNet::getInstance()->getCurrentTimeStep()));
+  // Request a new bus if the top limit is reached
+  if(owner->myWaitingPassengers.size()>=myPassengersAlarm&&!MSDemandBusStop::supportBusDelivered)
+  {
+    // Construct vehicle
+    buildSupportBus(owner->getID());
+    MSDemandBusStop::supportBusDelivered=true;
+    myReleaseDemandCommand = new ReleaseDemandCommand();
+    MSNet::getInstance()->getBeginOfTimestepEvents().addEvent(
+      myReleaseDemandCommand, MSNet::getInstance()->getCurrentTimeStep()+300/*delay*/, MSEventControl::ADAPT_AFTER_EXECUTION);
+  }
+  return 1;
+}
+
+SUMOTime
+MSDemandBusStop::ReleaseDemandCommand::execute(SUMOTime) throw(ProcessError)
+{
+  // check whether this command has been descheduled
+  if (!myAmValid) {
+    return 0;
+  }
+  MSDemandBusStop::supportBusDelivered=false;
+  deschedule();
+  return 0;
+}
+
+
+void
+MSDemandBusStop::DemandCommand::deschedule()
+{
+  myAmValid = false;
+}
+
+void
+MSDemandBusStop::ReleaseDemandCommand::deschedule()
+{
+  myAmValid = false;
+}
+
+int
+MSDemandBusStop::busPickUp(MSVehicle* vehicle)
+{
+  //TODO: bus capacity is hard-coded to 40 passengers
+  srand(time(NULL));
+  if(vehicle->getOccupancy()!=0) vehicle->removePassengers(rand()%(vehicle->getOccupancy()+1));
+  int passengersup = min<int>(myWaitingPassengers.size(),40-vehicle->getOccupancy());
+  if(MSCORN::wished(MSCORN::CORN_OUT_PASSENGERS)) {
+    std::list<Passenger*>::reverse_iterator i = myWaitingPassengers.rbegin();
+    for(int j = 0; j < passengersup; j++){
+      MSCORN::savePassengerInfo(
+        MSNet::getInstance()->getCurrentTimeStep(), getID(),
+        ((Passenger*)(*i))->getWaitedTime(),vehicle->getID());
+      i++;
+    }
+  }
+  vehicle->addPassengers(passengersup);
+  for(int z = 0; z<passengersup; z++)
+    myWaitingPassengers.pop_back();
+  return passengersup;
+}
+
+int
+MSDemandBusStop::getWaitingPassengers()
+{
+  return myWaitingPassengers.size();
+}
+
+MSDemandBusStop::MSDemandBusStop(const std::string &id,
+                     const std::vector<std::string> &lines,
+                     MSLane &lane,
+                     SUMOReal begPos, SUMOReal endPos, int passengersMinute, int passengersAlarm, int stopTimePerPassenger) throw()
+                     : MSBusStop(id,lines,lane,begPos,endPos)
+{
+  myDemandCommand = new DemandCommand();
+  myDemandCommand->setOwner(this);
+  myDemandCommand->setPassengersMinute(passengersMinute);
+  myDemandCommand->setPassengersAlarm(passengersAlarm);
+  MSNet::getInstance()->getBeginOfTimestepEvents().addEvent(
+    myDemandCommand, 1/*delay*/, MSEventControl::ADAPT_AFTER_EXECUTION);
+  myStopTimePerPassenger=stopTimePerPassenger;
+  myWaitingPassengers.clear();
+}
+
+void
+MSDemandBusStop::leaveFrom(MSVehicle *what)
+{
+  assert(myEndPositions.find(what)!=myEndPositions.end());
+  myEndPositions.erase(myEndPositions.find(what));
+  computeLastFreePos();
+  //busPickUp(what); This function is now called at bus arrival, through getStopDuration() function
+  MSCORN::saveBusOccupancyInfo(
+    MSNet::getInstance()->getCurrentTimeStep(), getID(),
+    what->getOccupancy(),what->getID());
+}
+
+int
+MSDemandBusStop::getStopDuration(MSVehicle *what)
+{
+  //TODO: Stop base time is hardcoded to 10 secs.
+  return 10+getBoardingPassengers(what)*getStopTimePerPassenger();
+}
+
+int
+MSDemandBusStop::getBoardingPassengers(MSVehicle *what)
+{
+  return busPickUp(what);
+}
+
+// ===========================================================================
Index: src/microsim/trigger/MSDemandBusStop.h
===================================================================
--- src/microsim/trigger/MSDemandBusStop.h	(Revision 0)
+++ src/microsim/trigger/MSDemandBusStop.h	(Revision 0)
@@ -0,0 +1,181 @@
+/****************************************************************************/
+/// @file    MSDemandBusStop.h
+/// @author  Alberto Zambrano Galbis
+/// @date    Marz 2008
+/// @version $Id: sumo.diff 5665 2008-06-27 05:14:06Z behrisch $
+///
+/// <BREIF DESCRIPTION OF THE FILE'S CONTENT>
+/****************************************************************************/
+// SUMO, Simulation of Urban MObility; see http://sumo.sourceforge.net/
+// copyright : (C) 2001-2007
+//  by DLR (http://www.dlr.de/) and ZAIK (http://www.zaik.uni-koeln.de/AFS)
+/****************************************************************************/
+//
+//   This program is free software; you can redistribute it and/or modify
+//   it under the terms of the GNU General Public License as published by
+//   the Free Software Foundation; either version 2 of the License, or
+//   (at your option) any later version.
+//
+/****************************************************************************/
+#ifndef MSDemandBusStop_h
+#define MSDemandBusStop_h
+
+
+// ===========================================================================
+// included modules
+// ===========================================================================
+#ifdef _MSC_VER
+#include <windows_config.h>
+#else
+#include <config.h>
+#endif
+
+#include "MSBusStop.h"
+#include <utils/common/Command.h>
+
+
+
+
+// ===========================================================================
+// class declarations
+// ===========================================================================
+class MSNet;
+
+// ===========================================================================
+// class definitions
+// ===========================================================================
+/**
+* @class MSDemandBusStop
+* @brief A lane area vehicles can halt at, with demand control
+*/
+class MSDemandBusStop : public MSBusStop
+{
+public:
+  /** @brief Constructor
+  *
+  * @param[in] id The id of the bus stop
+  * @param[in] net The net the bus stop belongs to
+  * @param[in] lines Names of the bus lines that halt on this bus stop
+  * @param[in] lane The lane the bus stop is placed on
+  * @param[in] begPos Begin position of the bus stop on the lane
+  * @param[in] endPos End position of the bus stop on the lane
+  */
+  MSDemandBusStop(const std::string &id,
+    const std::vector<std::string> &lines, MSLane &lane,
+    SUMOReal begPos, SUMOReal endPos, int passengersMinute, int passengersAlarm, int stopTimePerPassenger) throw();
+
+  /// Called if a vehicle leaves this stop
+  void leaveFrom(MSVehicle *what);
+
+  int getStopDuration(MSVehicle *what);
+
+  int getStopTimePerPassenger(){ return myStopTimePerPassenger;};
+
+  int busPickUp(MSVehicle* vehicle);
+
+  int getWaitingPassengers();
+  int getBoardingPassengers(MSVehicle *what);
+
+protected:
+  
+
+  class Passenger
+  {
+  public:
+
+    Passenger(SUMOTime t)
+    {
+      myArrivalTime=t;
+    };
+    int getWaitedTime()
+    {
+      return MSNet::getInstance()->getCurrentTimeStep()-myArrivalTime;
+    };
+  protected:
+    SUMOTime myArrivalTime;
+
+  };
+
+
+  class ReleaseDemandCommand : public Command
+  {
+  public:
+    /// Constructor
+    ReleaseDemandCommand() throw();
+
+    /// Destructor
+    ~ReleaseDemandCommand() throw();
+
+    /** @brief Executes this event
+    Executes the regarded junction's "trySwitch"- method */
+    SUMOTime execute(SUMOTime currentTime) throw(ProcessError);
+
+    void deschedule();
+  private:
+    /// Information whether this switch command is still valid
+    bool myAmValid;
+
+  private:
+    /// @brief Invalidated copy constructor.
+    ReleaseDemandCommand(const ReleaseDemandCommand&);
+
+    /// @brief Invalidated assignment operator.
+    ReleaseDemandCommand& operator=(const ReleaseDemandCommand&);
+  };
+
+
+
+
+  class DemandCommand : public Command
+  {
+  public:
+    /// Constructor
+    DemandCommand() throw();
+
+    /// Destructor
+    ~DemandCommand() throw();
+
+    /** @brief Executes this event
+    Executes the regarded junction's "trySwitch"- method */
+    SUMOTime execute(SUMOTime currentTime) throw(ProcessError);
+
+    void deschedule();
+
+
+    void setOwner(MSDemandBusStop* o){owner=o;};
+
+    void setPassengersMinute(int p){myPassengersPerMinute=p;};
+    void setPassengersAlarm(int a){myPassengersAlarm=a;};
+
+  private:
+    /// Information whether this switch command is still valid
+    bool myAmValid;
+    ReleaseDemandCommand *myReleaseDemandCommand;
+
+  private:
+    /// @brief Invalidated copy constructor.
+    DemandCommand(const DemandCommand&);
+
+    /// @brief Invalidated assignment operator.
+    DemandCommand& operator=(const DemandCommand&);
+
+    MSDemandBusStop* owner;
+    int myPassengersPerMinute, myPassengersAlarm;
+  };
+
+  
+
+
+protected:
+  /// The current demand command
+  DemandCommand *myDemandCommand;
+
+private:
+  static void buildSupportBus(std::string stop);
+  static void addStop(std::string stopName, MSVehicle* vehicle);
+  static bool supportBusDelivered;
+  int myStopTimePerPassenger;
+  std::list<Passenger*> myWaitingPassengers;
+};
+
+#endif
Index: src/microsim/trigger/Makefile.am
===================================================================
--- src/microsim/trigger/Makefile.am	(Revision 5664)
+++ src/microsim/trigger/Makefile.am	(Arbeitskopie)
@@ -1,6 +1,7 @@
 noinst_LIBRARIES = libmicrosimtrigger.a
 
 libmicrosimtrigger_a_SOURCES = MSBusStop.cpp MSBusStop.h \
+MSDemandBusStop.cpp MSDemandBusStop.h \
 MSCalibrator.cpp MSCalibrator.h \
 MSE1VehicleActor.cpp MSE1VehicleActor.h \
 MSLaneSpeedTrigger.cpp MSLaneSpeedTrigger.h \
Index: src/microsim/MSFrame.cpp
===================================================================
--- src/microsim/MSFrame.cpp	(Revision 5664)
+++ src/microsim/MSFrame.cpp	(Arbeitskopie)
@@ -167,6 +167,12 @@
     oc.doRegister("end", 'e', new Option_Integer(86400));
     oc.addDescription("end", "Time", "Defines the end time; The simulation ends at this time");
 
+    oc.doRegister("passengersinfo-output", new Option_FileName());
+    oc.addDescription("passengersinfo-output", "Output", "Info about passengers waiting times at bus stops");
+
+    oc.doRegister("busoccupancy-output", new Option_FileName());
+    oc.addDescription("busoccupancy-output", "Output", "Info about bus occupancy rates");
+
 #ifdef HAVE_SUBSECOND_TIMESTEPS
 #ifdef HAVE_VARIABLE_SUBSECOND_TIMESTEPS
     oc.doRegister("step-length", new Option_Float((SUMOReal) .1));
@@ -315,6 +321,9 @@
     OutputDevice::createDeviceByOption("c2x.saved-info-freq", "savedInfosFreq");
     OutputDevice::createDeviceByOption("c2x.transmitted-info", "transmittedInfos");
     OutputDevice::createDeviceByOption("c2x.vehicle-in-range", "vehicleInRanges");
+    //Passenger-outputs
+    OutputDevice::createDeviceByOption("passengersinfo-output", "passengers");
+    OutputDevice::createDeviceByOption("busoccupancy-output", "busoccupancy");
 
     // initialise TrafficOnline-outputs
     if (OptionsCont::getOptions().isSet("ss2-sql-output")) {
Index: src/microsim/MSRouteHandler.cpp
===================================================================
--- src/microsim/MSRouteHandler.cpp	(Revision 5664)
+++ src/microsim/MSRouteHandler.cpp	(Arbeitskopie)
@@ -50,6 +50,7 @@
 
 #include <microsim/trigger/MSTriggerControl.h>
 #include <microsim/trigger/MSBusStop.h>
+#include <microsim/trigger/MSDemandBusStop.h>
 #include <microsim/MSGlobals.h>
 #include <utils/xml/SUMOVehicleParserHelper.h>
 
@@ -129,6 +130,7 @@
         stop.busstop = 0;
         // try to parse the assigne bus stop
         string bus_stop = attrs.getStringSecure(SUMO_ATTR_BUS_STOP, "");
+        string demand_bus_stop = attrs.getStringSecure(SUMO_ATTR_DEMAND_BUS_STOP, "");
         if (bus_stop!="") {
             // ok, we have obviously a bus stop
             MSBusStop *bs =
@@ -142,7 +144,24 @@
                 MsgHandler::getErrorInstance()->inform("The bus stop '" + bus_stop + "' is not known.");
                 return;
             }
+
+        }
+        else if (demand_bus_stop!="") {
+          // ok, we have obviously a bus stop with demand
+          MSDemandBusStop *bs =
+            (MSDemandBusStop*) MSNet::getInstance()->getTriggerControl().getTrigger(demand_bus_stop);
+          if (bs!=0) {
+            const MSLane &l = bs->getLane();
+            stop.lane = &((MSLane &) l);
+            stop.busstop = bs;
+            stop.pos = bs->getEndLanePosition();
         } else {
+            MsgHandler::getErrorInstance()->inform("The bus stop with demand '" + demand_bus_stop + "' is not known.");
+            return;
+          }
+
+        }
+        else {
             // no, the lane and the position should be given
             // get the lane
             string laneS = attrs.getStringSecure(SUMO_ATTR_LANE, "");
Index: src/microsim/MSCORN.h
===================================================================
--- src/microsim/MSCORN.h	(Revision 5664)
+++ src/microsim/MSCORN.h	(Arbeitskopie)
@@ -61,6 +61,9 @@
         CORN_OUT_TRIPDURATIONS,
         CORN_OUT_EMISSIONS,
         CORN_OUT_VEHROUTES,
+        CORN_OUT_PASSENGERS,
+        CORN_PAS_WAITINGTIME,
+        CORN_OUT_BUS_OCCUPANCY,
         // c2x-output
         CORN_OUT_CLUSTER_INFO,
         CORN_OUT_SAVED_INFO,
@@ -107,6 +110,8 @@
             int callID, const std::string &pos, int quality);
 
 
+    static void setPassengerInfoOutput(OutputDevice *s);
+
     //car2car
     static void saveClusterInfoData(SUMOTime step, int id,
                                     const std::string &headID,
@@ -121,6 +126,12 @@
                                        SUMOReal x1, SUMOReal y1,
                                        SUMOReal x2 , SUMOReal y2);
 
+    static void savePassengerInfo(SUMOTime time,
+      std::string callID, int waitingSeconds,std::string busID);
+
+    static void saveBusOccupancyInfo(SUMOTime time, std::string callID, int Occupancy, std::string busID);
+
+
 private:
     //Car2car
     static SUMOTime myLastStepClusterInfoOutput;
Index: src/microsim/MSNet.cpp
===================================================================
--- src/microsim/MSNet.cpp	(Revision 5664)
+++ src/microsim/MSNet.cpp	(Arbeitskopie)
@@ -166,6 +166,7 @@
     myMSPhoneNet = new MSPhoneNet();
     // intialise outputs
     myMeanData = meanData;
+
     // tol
     if (OptionsCont::getOptions().isSet("ss2-cell-output")||OptionsCont::getOptions().isSet("ss2-sql-cell-output")) {
         // start old-data removal through MSEventControl
@@ -332,6 +333,12 @@
     if (OptionsCont::getOptions().isSet("vehroute-output")) {
         MSCORN::setWished(MSCORN::CORN_OUT_VEHROUTES);
     }
+    if (OptionsCont::getOptions().isSet("passengersinfo-output")) {
+      MSCORN::setWished(MSCORN::CORN_OUT_PASSENGERS);
+    }
+    if (OptionsCont::getOptions().isSet("busoccupancy-output")) {
+      MSCORN::setWished(MSCORN::CORN_OUT_BUS_OCCUPANCY);
+    }
 
     //car2car
     if (OptionsCont::getOptions().isSet("c2x.cluster-info")) {
Index: src/netload/NLTriggerBuilder.cpp
===================================================================
--- src/netload/NLTriggerBuilder.cpp	(Revision 5664)
+++ src/netload/NLTriggerBuilder.cpp	(Arbeitskopie)
@@ -37,6 +37,7 @@
 #include <microsim/trigger/MSTriggerControl.h>
 #include <microsim/trigger/MSTriggeredRerouter.h>
 #include <microsim/trigger/MSBusStop.h>
+#include <microsim/trigger/MSDemandBusStop.h>
 #include <microsim/trigger/MSE1VehicleActor.h>
 #include <microsim/MSPhoneCell.h>
 #include <utils/common/StringTokenizer.h>
@@ -94,6 +95,8 @@
         t = parseAndBuildRerouter(net, attrs, base);
     } else if (type=="bus_stop") {
         t = parseAndBuildBusStop(net, attrs);
+    } else if (type=="demand_bus_stop") {
+        t = parseAndBuildDemandBusStop(net, attrs);
     } else if (type=="vehicle_actor") {
         /*first check, that the depending lane realy exist. if not just forget this VehicleActor. */
         if (attrs.getInt(SUMO_ATTR_TYPE) == 3) {
@@ -277,7 +280,44 @@
     return buildBusStop(net, id, lines, lane, frompos, topos);
 }
 
+MSDemandBusStop *
+NLTriggerBuilder::parseAndBuildDemandBusStop(MSNet &net, const SUMOSAXAttributes &attrs) throw(InvalidArgument)
+{
+  string id = attrs.getString(SUMO_ATTR_ID);
+  // get the lane
+  string objectid = attrs.getString(SUMO_ATTR_OBJECTID);
+  MSLane *lane = getLane(attrs, "bus_stop", id);
+  // get the positions
+  SUMOReal frompos, topos;
+  try {
+    frompos = attrs.getFloat(SUMO_ATTR_FROM);
+    topos = attrs.getFloat(SUMO_ATTR_TO);
+  } catch (EmptyData&) {
+    throw InvalidArgument("Either the begin or the end position of busstop '" + id + "' is not given.");
+  } catch (NumberFormatException&) {
+    throw InvalidArgument("Either the begin or the end position of busstop '" + id + "' is not numeric.");
+  }
+  if (frompos<0) {
+    frompos = lane->length() + frompos;
+  }
+  if (topos<0) {
+    topos = lane->length() + topos;
+  }
+  // get the lines
+  std::string lineStr = attrs.getStringSecure(SUMO_ATTR_LINES, "");
+  std::vector<std::string> lines;
+  if (lineStr.length()!=0) {
+    StringTokenizer st(lineStr, ";");
+    lines = st.getVector();
+  }
+  // build the bus stop
+  int passengersMinute = attrs.getInt(SUMO_ATTR_PASSENGERS_MINUTE);
+  int passengersAlarm = attrs.getInt(SUMO_ATTR_PASSENGERS_ALARM);
+  int stopTimePerPassenger = attrs.getInt(SUMO_ATTR_STOP_TIME_PER_PASSENGER);
+  return buildDemandBusStop(net, id, lines, lane, frompos, topos, passengersMinute, passengersAlarm, stopTimePerPassenger);
+}
 
+
 MSE1VehicleActor *
 NLTriggerBuilder::parseAndBuildVehicleActor(MSNet &net, const SUMOSAXAttributes &attrs) throw(InvalidArgument)
 {
@@ -484,6 +524,17 @@
 }
 
 
+MSDemandBusStop*
+NLTriggerBuilder::buildDemandBusStop(MSNet &, const std::string &id,
+                               const std::vector<std::string> &lines,
+                               MSLane *lane, SUMOReal frompos, SUMOReal topos, int passengersperminute, int passengersAlarm, int stopTimePerPassenger) throw()
+{
+  return new MSDemandBusStop(id, lines, *lane, frompos, topos, passengersperminute, passengersAlarm, stopTimePerPassenger);
+}
+////----AZG
+bool MSDemandBusStop::supportBusDelivered=false;
+
+
 MSE1VehicleActor *
 NLTriggerBuilder::buildVehicleActor(MSNet &, const std::string &id,
                                     MSLane *lane, SUMOReal pos, unsigned int la,
Index: src/netload/NLTriggerBuilder.h
===================================================================
--- src/netload/NLTriggerBuilder.h	(Revision 5664)
+++ src/netload/NLTriggerBuilder.h	(Arbeitskopie)
@@ -46,6 +46,7 @@
 class MSLane;
 class MSEdge;
 class MSBusStop;
+class MSDemandBusStop;
 class MSE1VehicleActor;
 class MSCalibrator;
 
@@ -177,6 +178,17 @@
                                     const SUMOSAXAttributes &attrs) throw(InvalidArgument);
 
 
+    /** @brief Parses his values and builds a bus stop with demand
+    *
+    * @param[in] net The network the bus stop belongs to
+    * @param[in] attrs SAX-attributes which define the trigger
+    * @return The built bus stop
+    * @exception InvalidArgument If a parameter (lane/position) is not valid
+    */
+    MSDemandBusStop *parseAndBuildDemandBusStop(MSNet &net,
+                                                const SUMOSAXAttributes &attrs) throw(InvalidArgument);
+
+
     /** @brief Parses his values and builds a vehicle actor
      *
      * @param[in] net The network the vehicle actor belongs to
@@ -289,6 +301,23 @@
                                     MSLane *lane, SUMOReal frompos, SUMOReal topos) throw();
 
 
+    /** @brief Builds a bus stop with demand
+    *
+    * Simply calls the MSDemandBusStop constructor.
+    *
+    * @param[in] net The net the bus stop belongs to
+    * @param[in] id The id of the bus stop
+    * @param[in] lines Names of the bus lines that halt on this bus stop
+    * @param[in] lane The lane the bus stop is placed on
+    * @param[in] frompos Begin position of the bus stop on the lane
+    * @param[in] topos End position of the bus stop on the lane
+    * @return The built bus stop
+    */
+    virtual MSDemandBusStop* buildDemandBusStop(MSNet &net,
+      const std::string &id, const std::vector<std::string> &lines,
+      MSLane *lane, SUMOReal frompos, SUMOReal topos, int passengersMinute, int passengersAlarm, int stopTimePerPassenger) throw();
+
+
     /** @brief builds a calibrator for online simulation
      *
      * Simply calls the MSCalibrator constructor.
Index: src/utils/xml/SUMOXMLDefinitions.cpp
===================================================================
--- src/utils/xml/SUMOXMLDefinitions.cpp	(Revision 5664)
+++ src/utils/xml/SUMOXMLDefinitions.cpp	(Arbeitskopie)
@@ -253,6 +253,12 @@
     { "pass",           SUMO_ATTR_PASS },
     { "forceLength",    SUMO_ATTR_FORCE_LENGTH },
     { "bus_stop",       SUMO_ATTR_BUS_STOP },
+    //////////////////////////////////////////////////////////////////////////
+    { "demand_bus_stop",       SUMO_ATTR_DEMAND_BUS_STOP },
+    { "passengersperminute",      SUMO_ATTR_PASSENGERS_MINUTE },
+    { "passengersalarm",      SUMO_ATTR_PASSENGERS_ALARM },
+    { "stoptimeperpassenger",      SUMO_ATTR_STOP_TIME_PER_PASSENGER },
+    //////////////////////////////////////////////////////////////////////////
     { "lines",          SUMO_ATTR_LINES },
     { "vclasses",       SUMO_ATTR_VCLASSES },
     { "value",          SUMO_ATTR_VALUE },
Index: src/utils/xml/SUMOXMLDefinitions.h
===================================================================
--- src/utils/xml/SUMOXMLDefinitions.h	(Revision 5664)
+++ src/utils/xml/SUMOXMLDefinitions.h	(Arbeitskopie)
@@ -342,6 +342,12 @@
     SUMO_ATTR_PASS,
     SUMO_ATTR_FORCE_LENGTH,
     SUMO_ATTR_BUS_STOP,
+    //////////////////////////////////////////////////////////////////////////
+    SUMO_ATTR_DEMAND_BUS_STOP,
+    SUMO_ATTR_PASSENGERS_MINUTE,
+    SUMO_ATTR_PASSENGERS_ALARM,
+    SUMO_ATTR_STOP_TIME_PER_PASSENGER,
+    //////////////////////////////////////////////////////////////////////////
     SUMO_ATTR_LINES,
     SUMO_ATTR_VCLASSES,
     SUMO_ATTR_VALUE,
